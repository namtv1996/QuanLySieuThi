!function (t) { function i(t, i, e, n, a, o) { function r() { i.checked = !0; for (var t in i.filterList) { if (i.filterList[t].SKU === i.itemOption.SKU) { i.checked = !1, i.displayError = "block", i.displaySuccess = "none"; break } i.checked = !0, i.displayError = "none", i.displaySuccess = "block" } } function l() { t.get("api/itemOption/getSKU", null, function (t) { i.itemOption.SKU = t.data }, function () { console.log("load items failed") }), t.get("api/itemOption/getall", null, function (t) { i.filterList = t.data }, function () { }) } function u(t) { t -= -.5; for (var i = new String(t), e = "", n = 0; n < i.length && "." != i[n]; n++) e += i[n]; for (var a = "", o = 0, n = e.length - 1; n >= 0; n--) o++, a += e[n], 3 == o && 0 != n && (a += ",", o = 0); for (var r = new String(a), l = "", n = r.length - 1; n >= 0; n--) l += r[n]; return l } function c(t) { for (var i = new String(t), e = "", n = 0; n < i.length; n++) "," != i[n] && (e += i[n]); return e } function s() { "" !== i.key && void 0 !== i.key ? t.get("api/itemCategory/search?key=" + i.key, null, function (t) { i.lsItemCategory = t.data, 0 == t.data.length ? (i.dp = "display:block;height:40px;padding:10px;", i.displayDiv = "none") : (i.dp = "display:none", i.displayDiv = "block") }, function () { console.log("load items failed") }) : (i.dp = "display:none", i.displayDiv = "none", i.lsItemCategory = []) } function d() { t.get("api/branch/getall", null, function (t) { i.branch = t.data; for (var e in t.data) i.branch[e].ClosingQuantity = 0 }, function () { console.log("load itemCategory failed") }) } function m() { i.itemOption.ClosingQuantity = 0; for (var t in i.branch) i.itemOption.ClosingQuantity += i.branch[t].ClosingQuantity } function p() { i.checked === !0 ? 1 == i.frmAddItem.$valid ? (i.items.Quantity = 1, i.items.CreateBy = "Hải Nam", i.items.BranchID = "0cd830a0-f22e-4920-9602-41cb3008adff", i.items.Unit = i.itemOption.Unit, 1 == i.itemOption.NotificationInventory && Number(c(i.itemOption.MinimumInventory)) < Number(c(i.itemOption.MaximumInventory)) || 0 == i.itemOption.NotificationInventory ? a.saveModel(i.items, "api/item/createImg").then(function (a) { i.itemOption.ItemID = a.data.ItemID, i.itemOption.Image1 = a.data.Image, i.itemOption.Name = i.items.Name, i.itemOption.Status = i.items.Status, i.itemOption.CreateBy = "Hải Nam", i.itemOption.Weigh = c(i.kl) + i.dv, i.itemOption.UnitName = i.items.Unit, i.itemOption.UnitConvertRate = 1, i.itemOption.ClosingQuantity = c(i.itemOption.ClosingQuantity), void 0 != i.itemOption.Unit && (i.itemOption.Name += " - " + i.itemOption.Unit); for (var o in i.listAttribute) void 0 != i.listAttribute[o].AttributeID && (i.itemOption.Name += " - " + i.listAttribute[o].value); t.post("api/itemOption/create", i.itemOption, function (a) { i.listAttributeBind = []; for (var o in i.listAttribute) void 0 != i.listAttribute[o].AttributeID && (i.listAttributeBind[o] = {}, i.listAttributeBind[o].value = i.listAttribute[o].value, i.listAttributeBind[o].AttributeID = i.listAttribute[o].AttributeID, i.listAttributeBind[o].ItemOptionID = a.data.ID); i.listAttributeBind.length > 0 ? t.post("api/attributedetail/create", i.listAttributeBind, function () { e.displaySuccess("Thêm mới thành công!") }) : e.displaySuccess("Thêm mới thành công!"); for (var o in i.branch) i.stock[o] = {}, i.stock[o].StockID = "00000000-0000-0000-0000-000000000000", i.stock[o].BranchID = i.branch[o].BranchID, i.stock[o].ItemOptionID = a.data.ID, i.stock[o].Quantity = i.branch[o].ClosingQuantity, i.stock[o].InitialInventory = i.branch[o].ClosingQuantity; t.post("api/stock/create", i.stock, function () { }), O ? (n.go("items_add"), O = !1, i.getSKU()) : (n.go("items"), O = !1, i.getSKU()) }, function () { e.displayError("Thêm mới không thành công.") }) }, function () { e.displayError("Thêm mới không thành công.") }) : e.displayWarning("Tồn tối đa phải lớn hơn tồn tối thiểu")) : e.displayWarning("Vui lòng nhập đủ thông tin vào các trường có dấu sao màu đỏ.") : e.displayWarning("Mã SKU đã tồn tại !!") } function g() { i.itemOption.NotificationInventory ? (i.readOnly = "visible", $("input.number")[6].style.backgroundColor = "#fbfbfb", $("input.number")[5].style.backgroundColor = "#fbfbfb") : (i.readOnly = "none", $("input.number")[6].style.backgroundColor = "#d2cece", $("input.number")[5].style.backgroundColor = "#d2cece") } function y() { N++; var t = Number(i.listAttribute.length); i.listAttribute[t] = {}, i.listAttribute[t].index = N, i.listAttribute[t].display = "none", i.listAttribute[t].name = "", i.listAttribute[t].value = "" } function b(t) { for (var e in i.listAttribute) i.listAttribute[e].index == t && i.listAttribute.splice(e, 1) } function f() { t.get("api/attribute/getAll", null, function (t) { i.listAttributeView = t.data }, function () { console.log("loadfail") }) } function h(e) { e.display = "block", "" != e.name && t.get("api/attribute/getByName?key=" + e.name, null, function (n) { null == n.data ? (i.dp1 = "display:block;height:40px;padding:10px;", i.listAttributeView = []) : i.dp1 = "display:none", t.get("api/attribute/search?key=" + e.name, null, function (t) { i.listAttributeView = t.data }) }) } function I(t, e) { e.AttributeID = t.AttributeID, e.name = t.Name, e.display = "none", i.dp1 = "display:none" } function k(e) { "" != e ? t.get("api/attribute/getByName?key=" + e, null, function (n) { null == n.data ? (i.dp1 = "display:block;height:40px;padding:10px;", i.listAttributeView = []) : i.dp1 = "display:none", t.get("api/attribute/search?key=" + e, null, function (t) { i.listAttributeView = t.data }) }) : (i.dp1 = "display:none", i.getAllAttribute()) } function v(n) { i.attributeNew = {}, i.attributeNew.Name = n, i.attributeNew.Status = !0, t.post("api/attribute/create", i.attributeNew, function (t) { e.displaySuccess("Thêm mới thuộc tính " + t.data.Name), i.dp1 = "display:none" }) } function A() { i.stringname = i.items.Name } function C(i) { o.confirm("Bạn có chắc muốn xóa?").then(function () { var n = { params: { id: i } }; t.del("api/itemCategory/delete", n, function () { e.displaySuccess("Xóa thành công"), focusInput1() }, function () { e.displayError("Xóa không thành công") }) }) } i.items = { Quantity: 0, Status: !0, ItemCategoryID: "" }, i.stock = [], i.itemOption = { HomeFlag: !0, SalePrice: 0, WholesalePrice: 0, ClosingQuantity: 0, InitialPrice: 0, PurchasePrice: 0, MinimumInventory: 0, MaximumInventory: 0 }, i.check = r, i.checked = !0, i.filterList = [], i.displayError = "none", i.displaySuccess = "block", i.getSKU = l, i.getSKU(), i.itemCategory = { ItemCategoryName: "", Status: !0 }, $(document).ready(function () { $(window).keydown(function (t) { return 13 == t.keyCode ? (t.preventDefault(), !1) : void 0 }) }), i.branch = [], i.lsItemCategory = [], i.AddItems = p, i.getBranch = d(), i.search = s, i.dp = "display:none;height:40px;padding:10px;", i.key = "", i.kl = 0, i.dv = "kg"; var O = !1; i.SaveAndAdd = function () { 1 == i.frmAddItem.$valid ? (O = !0, p()) : e.displayWarning("Vui lòng nhập đủ thông tin vào các trường có dấu sao màu đỏ.") }, i.Currency = u, i.ConvertNumber = c, i.displayDiv = "none", i.choose = function (t) { i.itemCategory = t, i.items.ItemCategoryID = t.Id, i.lsItemCategory = [], i.key = i.itemCategory.ItemCategoryName, i.dp = "display:none", i.displayDiv = "none" }, i.addItemCategory = function () { i.itemCategory.ItemCategoryName = i.key, t.post("api/itemCategory/create", i.itemCategory, function (t) { i.items.ItemCategoryID = t.data.Id, i.lsItemCategory = [], i.dp = "display:none;height:40px;padding:10px;", e.displayInfo("Thêm mới loại hàng hóa " + i.key + " Thành công") }, function () { e.displayError("Thêm mới không thành công.") }) }, i.calculateClosingQuantity = m, i.itemOption.NotificationInventory = !1, i.readOnly = "none", $("input.number")[6].style.backgroundColor = "#d2cece", $("input.number")[5].style.backgroundColor = "#d2cece", i.notificationInventory = g, i.listAttribute = []; var N = 0; i.attribute = { display: "none", name: "", value: "", index: 0 }, i.listAttribute.push(i.attribute), i.addAttribute = y, i.deleteAttribute = b, i.listAttributeView = [], i.getAllAttribute = f, i.getAllAttribute(), i.focusInput = h, i.chooseAttribute = I, i.searchAttribute = k, i.dp1 = "display:none;height:40px;padding:10px;", i.addNewAttribute = v, i.stringname = "", i.enterName = A, i.deleteItemsCategory = C } t.controller("itemAddController", i), i.$inject = ["apiService", "$scope", "notificationService", "$state", "akFileUploaderService", "$ngBootbox"] }(angular.module("tiktak.items"));